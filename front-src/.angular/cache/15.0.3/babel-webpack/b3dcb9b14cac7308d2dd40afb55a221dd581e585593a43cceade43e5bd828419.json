{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class EventBusService {\n  constructor() {\n    this.subject$ = new Subject();\n  }\n  emit(event) {\n    this.subject$.next(event);\n  }\n  on(eventName, action) {\n    return this.subject$.pipe(filter(e => e.name === eventName), map(e => e[\"value\"])).subscribe(action);\n  }\n}\nEventBusService.ɵfac = function EventBusService_Factory(t) {\n  return new (t || EventBusService)();\n};\nEventBusService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventBusService,\n  factory: EventBusService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAsB,MAAM;AAC5C,SAASC,MAAM,EAAEC,GAAG,QAAQ,gBAAgB;;AAM5C,OAAM,MAAOC,eAAe;EAH5BC;IAIU,aAAQ,GAAG,IAAIJ,OAAO,EAAa;;EAE3CK,IAAI,CAACC,KAAgB;IACnB,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,KAAK,CAAC;EAC3B;EAEAG,EAAE,CAACC,SAAiB,EAAEC,MAAW;IAC/B,OAAO,IAAI,CAACJ,QAAQ,CAACK,IAAI,CACvBX,MAAM,CAAEY,CAAY,IAAKA,CAAC,CAACC,IAAI,KAAKJ,SAAS,CAAC,EAC9CR,GAAG,CAAEW,CAAY,IAAKA,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAACE,SAAS,CAACJ,MAAM,CAAC;EACxD;;AAXWR,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAa,SAAfb,eAAe;EAAAc,YAFd;AAAM","names":["Subject","filter","map","EventBusService","constructor","emit","event","subject$","next","on","eventName","action","pipe","e","name","subscribe","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Mahmoud\\Desktop\\angular\\projetfinal\\node-js-server\\angular-15-client\\src\\app\\_shared\\event-bus.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { EventData } from './event.class';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EventBusService {\r\n  private subject$ = new Subject<EventData>();\r\n\r\n  emit(event: EventData) {\r\n    this.subject$.next(event);\r\n  }\r\n\r\n  on(eventName: string, action: any): Subscription {\r\n    return this.subject$.pipe(\r\n      filter((e: EventData) => e.name === eventName),\r\n      map((e: EventData) => e[\"value\"])).subscribe(action);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}